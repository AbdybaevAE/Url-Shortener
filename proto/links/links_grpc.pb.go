// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package links

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LinkServiceClient is the client API for LinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkServiceClient interface {
	ShortenLink(ctx context.Context, in *ShortenLinkReq, opts ...grpc.CallOption) (*ShortenLinkRes, error)
	GetLink(ctx context.Context, in *GetLinkReq, opts ...grpc.CallOption) (*GetLinkRes, error)
	VisitByKey(ctx context.Context, in *VisitByKeyReq, opts ...grpc.CallOption) (*VisitByKeyRes, error)
}

type linkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkServiceClient(cc grpc.ClientConnInterface) LinkServiceClient {
	return &linkServiceClient{cc}
}

func (c *linkServiceClient) ShortenLink(ctx context.Context, in *ShortenLinkReq, opts ...grpc.CallOption) (*ShortenLinkRes, error) {
	out := new(ShortenLinkRes)
	err := c.cc.Invoke(ctx, "/example.LinkService/ShortenLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) GetLink(ctx context.Context, in *GetLinkReq, opts ...grpc.CallOption) (*GetLinkRes, error) {
	out := new(GetLinkRes)
	err := c.cc.Invoke(ctx, "/example.LinkService/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) VisitByKey(ctx context.Context, in *VisitByKeyReq, opts ...grpc.CallOption) (*VisitByKeyRes, error) {
	out := new(VisitByKeyRes)
	err := c.cc.Invoke(ctx, "/example.LinkService/VisitByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkServiceServer is the server API for LinkService service.
// All implementations should embed UnimplementedLinkServiceServer
// for forward compatibility
type LinkServiceServer interface {
	ShortenLink(context.Context, *ShortenLinkReq) (*ShortenLinkRes, error)
	GetLink(context.Context, *GetLinkReq) (*GetLinkRes, error)
	VisitByKey(context.Context, *VisitByKeyReq) (*VisitByKeyRes, error)
}

// UnimplementedLinkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLinkServiceServer struct {
}

func (UnimplementedLinkServiceServer) ShortenLink(context.Context, *ShortenLinkReq) (*ShortenLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenLink not implemented")
}
func (UnimplementedLinkServiceServer) GetLink(context.Context, *GetLinkReq) (*GetLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedLinkServiceServer) VisitByKey(context.Context, *VisitByKeyReq) (*VisitByKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisitByKey not implemented")
}

// UnsafeLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkServiceServer will
// result in compilation errors.
type UnsafeLinkServiceServer interface {
	mustEmbedUnimplementedLinkServiceServer()
}

func RegisterLinkServiceServer(s grpc.ServiceRegistrar, srv LinkServiceServer) {
	s.RegisterService(&_LinkService_serviceDesc, srv)
}

func _LinkService_ShortenLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).ShortenLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.LinkService/ShortenLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).ShortenLink(ctx, req.(*ShortenLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.LinkService/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).GetLink(ctx, req.(*GetLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_VisitByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitByKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).VisitByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.LinkService/VisitByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).VisitByKey(ctx, req.(*VisitByKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LinkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.LinkService",
	HandlerType: (*LinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenLink",
			Handler:    _LinkService_ShortenLink_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _LinkService_GetLink_Handler,
		},
		{
			MethodName: "VisitByKey",
			Handler:    _LinkService_VisitByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "links/links.proto",
}
