// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/link/type.go

// Package mock_links is a generated GoMock package.
package mock_links

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLinkService is a mock of LinkService interface.
type MockLinkService struct {
	ctrl     *gomock.Controller
	recorder *MockLinkServiceMockRecorder
}

// MockLinkServiceMockRecorder is the mock recorder for MockLinkService.
type MockLinkServiceMockRecorder struct {
	mock *MockLinkService
}

// NewMockLinkService creates a new mock instance.
func NewMockLinkService(ctrl *gomock.Controller) *MockLinkService {
	mock := &MockLinkService{ctrl: ctrl}
	mock.recorder = &MockLinkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkService) EXPECT() *MockLinkServiceMockRecorder {
	return m.recorder
}

// GetOriginalFromShorten mocks base method.
func (m *MockLinkService) GetOriginalFromShorten(shortLink string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalFromShorten", shortLink)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalFromShorten indicates an expected call of GetOriginalFromShorten.
func (mr *MockLinkServiceMockRecorder) GetOriginalFromShorten(shortLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalFromShorten", reflect.TypeOf((*MockLinkService)(nil).GetOriginalFromShorten), shortLink)
}

// Shorten mocks base method.
func (m *MockLinkService) Shorten(longLink string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", longLink)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockLinkServiceMockRecorder) Shorten(longLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockLinkService)(nil).Shorten), longLink)
}
