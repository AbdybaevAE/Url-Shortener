// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/algo/type.go

// Package mock_algo is a generated GoMock package.
package mock_algo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAlgoService is a mock of AlgoService interface.
type MockAlgoService struct {
	ctrl     *gomock.Controller
	recorder *MockAlgoServiceMockRecorder
}

// MockAlgoServiceMockRecorder is the mock recorder for MockAlgoService.
type MockAlgoServiceMockRecorder struct {
	mock *MockAlgoService
}

// NewMockAlgoService creates a new mock instance.
func NewMockAlgoService(ctrl *gomock.Controller) *MockAlgoService {
	mock := &MockAlgoService{ctrl: ctrl}
	mock.recorder = &MockAlgoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlgoService) EXPECT() *MockAlgoServiceMockRecorder {
	return m.recorder
}

// EnsureAll mocks base method.
func (m *MockAlgoService) EnsureAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureAll indicates an expected call of EnsureAll.
func (mr *MockAlgoServiceMockRecorder) EnsureAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAll", reflect.TypeOf((*MockAlgoService)(nil).EnsureAll))
}

// GenerateKeys mocks base method.
func (m *MockAlgoService) GenerateKeys(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeys", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKeys indicates an expected call of GenerateKeys.
func (mr *MockAlgoServiceMockRecorder) GenerateKeys(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeys", reflect.TypeOf((*MockAlgoService)(nil).GenerateKeys), name)
}
