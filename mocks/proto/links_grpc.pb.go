// Code generated by MockGen. DO NOT EDIT.
// Source: proto/links_grpc.pb.go

// Package mock_links is a generated GoMock package.
package mock_links

import (
	context "context"
	reflect "reflect"

	links "github.com/abdybaevae/url-shortener/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLinkServiceClient is a mock of LinkServiceClient interface.
type MockLinkServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinkServiceClientMockRecorder
}

// MockLinkServiceClientMockRecorder is the mock recorder for MockLinkServiceClient.
type MockLinkServiceClientMockRecorder struct {
	mock *MockLinkServiceClient
}

// NewMockLinkServiceClient creates a new mock instance.
func NewMockLinkServiceClient(ctrl *gomock.Controller) *MockLinkServiceClient {
	mock := &MockLinkServiceClient{ctrl: ctrl}
	mock.recorder = &MockLinkServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkServiceClient) EXPECT() *MockLinkServiceClientMockRecorder {
	return m.recorder
}

// GetOriginalFromShorten mocks base method.
func (m *MockLinkServiceClient) GetOriginalFromShorten(ctx context.Context, in *links.GetOriginalFromShortenReq, opts ...grpc.CallOption) (*links.GetOriginalFromShortenRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOriginalFromShorten", varargs...)
	ret0, _ := ret[0].(*links.GetOriginalFromShortenRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalFromShorten indicates an expected call of GetOriginalFromShorten.
func (mr *MockLinkServiceClientMockRecorder) GetOriginalFromShorten(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalFromShorten", reflect.TypeOf((*MockLinkServiceClient)(nil).GetOriginalFromShorten), varargs...)
}

// Shorten mocks base method.
func (m *MockLinkServiceClient) Shorten(ctx context.Context, in *links.ShortenReq, opts ...grpc.CallOption) (*links.ShortenRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Shorten", varargs...)
	ret0, _ := ret[0].(*links.ShortenRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockLinkServiceClientMockRecorder) Shorten(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockLinkServiceClient)(nil).Shorten), varargs...)
}

// MockLinkServiceServer is a mock of LinkServiceServer interface.
type MockLinkServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLinkServiceServerMockRecorder
}

// MockLinkServiceServerMockRecorder is the mock recorder for MockLinkServiceServer.
type MockLinkServiceServerMockRecorder struct {
	mock *MockLinkServiceServer
}

// NewMockLinkServiceServer creates a new mock instance.
func NewMockLinkServiceServer(ctrl *gomock.Controller) *MockLinkServiceServer {
	mock := &MockLinkServiceServer{ctrl: ctrl}
	mock.recorder = &MockLinkServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkServiceServer) EXPECT() *MockLinkServiceServerMockRecorder {
	return m.recorder
}

// GetOriginalFromShorten mocks base method.
func (m *MockLinkServiceServer) GetOriginalFromShorten(arg0 context.Context, arg1 *links.GetOriginalFromShortenReq) (*links.GetOriginalFromShortenRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalFromShorten", arg0, arg1)
	ret0, _ := ret[0].(*links.GetOriginalFromShortenRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalFromShorten indicates an expected call of GetOriginalFromShorten.
func (mr *MockLinkServiceServerMockRecorder) GetOriginalFromShorten(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalFromShorten", reflect.TypeOf((*MockLinkServiceServer)(nil).GetOriginalFromShorten), arg0, arg1)
}

// Shorten mocks base method.
func (m *MockLinkServiceServer) Shorten(arg0 context.Context, arg1 *links.ShortenReq) (*links.ShortenRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", arg0, arg1)
	ret0, _ := ret[0].(*links.ShortenRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockLinkServiceServerMockRecorder) Shorten(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockLinkServiceServer)(nil).Shorten), arg0, arg1)
}

// MockUnsafeLinkServiceServer is a mock of UnsafeLinkServiceServer interface.
type MockUnsafeLinkServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLinkServiceServerMockRecorder
}

// MockUnsafeLinkServiceServerMockRecorder is the mock recorder for MockUnsafeLinkServiceServer.
type MockUnsafeLinkServiceServerMockRecorder struct {
	mock *MockUnsafeLinkServiceServer
}

// NewMockUnsafeLinkServiceServer creates a new mock instance.
func NewMockUnsafeLinkServiceServer(ctrl *gomock.Controller) *MockUnsafeLinkServiceServer {
	mock := &MockUnsafeLinkServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLinkServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLinkServiceServer) EXPECT() *MockUnsafeLinkServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLinkServiceServer mocks base method.
func (m *MockUnsafeLinkServiceServer) mustEmbedUnimplementedLinkServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLinkServiceServer")
}

// mustEmbedUnimplementedLinkServiceServer indicates an expected call of mustEmbedUnimplementedLinkServiceServer.
func (mr *MockUnsafeLinkServiceServerMockRecorder) mustEmbedUnimplementedLinkServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLinkServiceServer", reflect.TypeOf((*MockUnsafeLinkServiceServer)(nil).mustEmbedUnimplementedLinkServiceServer))
}
